// -*- coding: utf-8 -*-
// Copyright (C) 2017 Laboratoire de Recherche et DÃ©veloppement
// de l'Epita (LRDE).
//
// This file is part of Spot, a model checking library.
//
// Spot is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// Spot is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
// License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#pragma once

#include <iosfwd>
#include <spot/misc/common.hh>
#include <spot/twa/fwd.hh>

namespace spot
{
  /// \ingroup twa_io
  /// \brief Encode and print an automaton as BLIF (Berkley Logic Interchange
  /// Format).
  ///
  /// This funciton is primarily intended to be used for reactive synthesis
  /// problems. The automaton passed to the function must have a trivial
  /// acceptance condition (i.e. true) and the conditions on the edges must have
  /// the form (input cond) & (output cond) as generated by the functions
  /// unsplit_2step and apply_strategy. In contrast to the print_aiger,
  /// the output cond does not need to be a minterm.
  ///
  /// \param os           The output stream to print on.
  /// \param aut          The automaton to output.
  SPOT_API std::ostream&
  print_blif(std::ostream& os, const const_twa_ptr& aut);
}